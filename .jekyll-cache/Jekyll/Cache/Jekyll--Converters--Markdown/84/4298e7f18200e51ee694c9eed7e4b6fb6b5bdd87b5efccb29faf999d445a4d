I"A:<h2 id="overview">Overview</h2>

<p>HashMap内容并不难, 但是考察的很多, 而且有很多奇淫技巧.<br />
这一部分相对于dp和递归其实是不怎么需要智商的, 所以是值得刷的.</p>

<p><strong>注意:</strong></p>

<ol>
  <li>hashmap是基本的data structure类型. bi-map, TreeMap则不是. 虽然一些高级的数据结构类型更好用, 但面试的时候会被认为是投机取巧. 切记!  做题的时候也应该避免使用那些内建的高级数据结构.</li>
</ol>

<h2 id="constructor">Constructor</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create an empty hash map </span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span> 
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="c1">// 注意!!!! Generics cannot use primitive types.  故, init的时候不能使用int和char, 而要使用Integer和Character. </span>
  
<span class="c1">// Add elements to the map </span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"vishal"</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span> 
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"sachin"</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span> 
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"vaibhav"</span><span class="o">,</span> <span class="mi">20</span><span class="o">);</span> 
</code></pre></div></div>
<p><strong>hashmap 允许duplicate value, 不允许duplicate key, 如果put duplicate key的话, 新的key,value会覆盖旧的.</strong></p>

<h2 id="operations">Operations</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//通过 key 返回 value</span>
<span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>

<span class="c1">//测是否含有key</span>
<span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span> <span class="n">n</span> <span class="o">);</span>

<span class="c1">//测是否含有value</span>
<span class="n">map</span><span class="o">.</span><span class="na">containsValue</span><span class="o">(</span> <span class="n">n</span> <span class="o">);</span>

<span class="c1">//return size</span>
<span class="n">hashmap</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>

<span class="c1">//check if empty</span>
<span class="n">isEmpty</span><span class="o">();</span>

<span class="c1">//return all the keys in the hashmap as an array</span>
<span class="n">Hash_Map</span><span class="o">.</span><span class="na">values</span><span class="o">();</span>



<span class="c1">// using for-each loop for iteration over Map.entrySet() </span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">gfg</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span>  
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Key = "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">+</span> 
                     <span class="s">", Value = "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span> 
</code></pre></div></div>
<p><strong>hashmap不能通过value返回key. 不要再搜了!!! 已经搜了无数遍了. 与此相关的所有方法都是绕远路, 通过for loop增加runtime, 没有任何必要. 通过value返回key的话是违背hashmap构建理念的. 不要使用!!!</strong></p>

<h2 id="problems">Problems</h2>

<h3 id="two-sum-lc_001">Two Sum LC_001</h3>

<p><strong>Description</strong></p>

<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br />
You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>

<p>Example:</p>
<blockquote>
  <p>Given nums = [2, 7, 11, 15], target = 9,</p>

  <p>Because nums[0] + nums[1] = 2 + 7 = 9,<br />
return [0, 1].</p>
</blockquote>

<p><strong>Solution</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">complement</span> <span class="o">=</span> <span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">complement</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">complement</span><span class="o">)</span> <span class="o">!=</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">i</span><span class="o">,</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">complement</span><span class="o">)</span> <span class="o">};</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"No two sum solution"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>点评</strong></p>

<p>这道题作为LC第一题, 实力担当. 表面上是用hashmap做, 但并不是会hashmap就能做出来的.</p>

<ol>
  <li>首先要熟练掌握hashmap知道其get()方法, 只能通过value调key的特性, 才能会用map.put(nums[i],i) 去init反的hashmap.</li>
  <li>但是第一点之后马上会发现存在一个问题, 就是hashmap是不允许duplicate key的, 但是nums[]之中的量偏偏是含有duplicate特性.<br />
 这个时候就会用到hashmap另一个概念, put方法会用新量覆盖旧的量. 所以遇到duplicate key的时候永远只会留下后一个.</li>
  <li>了解以上两个特性之后, 就要利用这道题的特殊性: 唯一解和只有两个数相加.  而iterate nums[]的时候是从前往后的, 而hashmap之中只会保存最后一个量. 所以即使存在duplicate的话, 依然不会漏解.</li>
  <li>我知道这里说的不是很清楚. 要仔细看一遍题的话, 会想得更清楚.</li>
  <li>特殊的case是 [3,3], target = 6, 这个需要考虑duplicate value, 而且不能漏解. 我之前的program总是跑出 [0,0], 答案是[0,1].</li>
  <li>值得一提的是这道题用的奇淫技巧, 没有什么普遍性.</li>
</ol>

<p>今天是08-19-2020. 这道题目前刷了三遍了. 第一遍完全不会, 只会brutal, 第二遍知道hashmap没写出来, 第三遍写出来算法框架, 但是不会处理duplicate value的问题.</p>

<h2 id="first-unique-character-in-a-string-lc_387">First Unique Character in a String LC_387</h2>

<p><strong>Description</strong></p>

<p>Given a string, find the first non-repeating character in it and return its index. If it doesn’t exist, return -1.</p>

<p>Examples:</p>

<blockquote>
  <p>s = “leetcode”<br />
return 0.</p>

  <p>s = “loveleetcode”<br />
return 2.</p>
</blockquote>

<p><strong>Solution</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">firstUniqChar</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="c1">//hashmap比较基本的题目, 主要在于怎样设计hashmap. </span>
        <span class="c1">//思路非常简单, key是Char, value是key出现的次数.  </span>
        <span class="c1">//过第一遍用来统计每个char出现的次数. </span>
        <span class="c1">//过第二遍找出第一个出现次数为1的char. </span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">hm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span>
                <span class="o">{</span>
                    <span class="c1">// 虽然value是用来计数, 但是只要超过2就没有必要再计下去. 直接放个2就可以, 提升算力. </span>
                    <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span><span class="mi">2</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="k">else</span>
            <span class="o">{</span>
                <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span><span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
            
            
        <span class="o">}</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))==</span><span class="mi">1</span><span class="o">)</span>
                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>点评</strong></p>

<p>一遍过的题. 但是没有出最优解, 但算力依然是O(N), 此题显示出hashmap最核心的一点就是构建. key和value的选取是最关键的.</p>
:ET