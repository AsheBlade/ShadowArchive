I"do<h2 id="overview">Overview</h2>

<p>几乎所有的Tree问题都是递归问题.  <strong>Tree这一块没有什么太多的创造性, 主要在于死记硬背</strong>, 一些traverse必须死记.<br />
当年的丢人的就是在Google面试的时候traverse tree没写出来.</p>

<h2 id="constructor">Constructor</h2>

<h3 id="node-class">Node Class</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Node</span> 
<span class="o">{</span> 
    <span class="kt">int</span> <span class="n">key</span><span class="o">;</span> 
    <span class="nc">Node</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">;</span> 
  
    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">item</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="n">key</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span> 
        <span class="n">left</span> <span class="o">=</span> <span class="n">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="o">}</span> 
<span class="o">}</span> 
</code></pre></div></div>

<hr />
<p><br /><br /></p>

<h3 id="binary-tree-class">Binary Tree Class</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BinaryTree</span> 
<span class="o">{</span> 
    <span class="c1">// Root of Binary Tree </span>
    <span class="nc">Node</span> <span class="n">root</span><span class="o">;</span> 
  
    <span class="nc">BinaryTree</span><span class="o">()</span> 
    <span class="o">{</span> 
        <span class="n">root</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="o">}</span> 
  
 <span class="o">}</span>
</code></pre></div></div>

<hr />
<p><br /><br /></p>

<h3 id="build-the-tree">Build the Tree</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BinaryTree</span> <span class="n">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BinaryTree</span><span class="o">();</span> 
<span class="n">tree</span><span class="o">.</span><span class="na">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> 
<span class="n">tree</span><span class="o">.</span><span class="na">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> 
<span class="n">tree</span><span class="o">.</span><span class="na">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> 
<span class="n">tree</span><span class="o">.</span><span class="na">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span> 
<span class="n">tree</span><span class="o">.</span><span class="na">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</code></pre></div></div>

<hr />
<p><br /><br /></p>

<h2 id="traverse">Traverse</h2>

<p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/2009/06/tree12.gif" alt="" /></p>

<h3 id="inorder">InOrder</h3>

<p>(Left, Root, Right) : 4 2 5 1 3</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/* Given a binary tree, print its nodes in inorder*/</span>
    <span class="kt">void</span> <span class="nf">printInorder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> 
            <span class="k">return</span><span class="o">;</span> 
  
        <span class="cm">/* first recur on left child */</span>
        <span class="n">printInorder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span> 
  
        <span class="cm">/* then print the data of node */</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">key</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span> 
  
        <span class="cm">/* now recur on right child */</span>
        <span class="n">printInorder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span> 
    <span class="o">}</span> 
</code></pre></div></div>

<hr />
<p><br /><br /></p>

<h3 id="preorder-dfs">PreOrder (DFS)</h3>

<p>(Root, Left, Right) : 1 2 4 5 3</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/* Given a binary tree, print its nodes in preorder*/</span>
    <span class="kt">void</span> <span class="nf">printPreorder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> 
            <span class="k">return</span><span class="o">;</span> 
  
        <span class="cm">/* first print data of node */</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">key</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span> 
  
        <span class="cm">/* then recur on left sutree */</span>
        <span class="n">printPreorder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span> 
  
        <span class="cm">/* now recur on right subtree */</span>
        <span class="n">printPreorder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span> 
    <span class="o">}</span> 
</code></pre></div></div>

<hr />
<p><br /><br /></p>

<h3 id="postorder">PostOrder</h3>

<p>(Left, Right, Root) : 4 5 2 3 1</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/* Given a binary tree, print its nodes according to the 
      "bottom-up" postorder traversal. */</span>
    <span class="kt">void</span> <span class="nf">printPostorder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> 
            <span class="k">return</span><span class="o">;</span> 
  
        <span class="c1">// first recur on left subtree </span>
        <span class="n">printPostorder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span> 
  
        <span class="c1">// then recur on right subtree </span>
        <span class="n">printPostorder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span> 
  
        <span class="c1">// now deal with the node </span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">key</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span> 
    <span class="o">}</span> 
</code></pre></div></div>

<hr />
<p><br /><br /></p>

<h3 id="bfs-vs-dfs">BFS vs DFS</h3>

<p><img src="https://lh3.googleusercontent.com/proxy/LY0VVyRzqo4oLWGZri1FqednIe9TvFppvpddfBy5xSvVOX1hSVxCPxCrHd71ZM87DHpyHSFx79XyKGeKc9C7wsGbzEUNB8xb1AxajHyy" alt="" /></p>

<hr />
<p><br /><br /></p>

<h3 id="bfs">BFS</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/* Given a binary tree. Print its nodes in level order 
     using array for implementing queue  */</span>
    <span class="kt">void</span> <span class="nf">printLevelOrder</span><span class="o">()</span>  
    <span class="o">{</span> 
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;();</span> 
        <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span> 
        <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>  
        <span class="o">{</span> 
  
            <span class="cm">/* poll() removes the present head. 
            For more information on poll() visit  
            http://www.tutorialspoint.com/java/util/linkedlist_poll.htm */</span>
            <span class="nc">Node</span> <span class="n">tempNode</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> 
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">tempNode</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span> 
  
            <span class="cm">/*Enqueue left child */</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">tempNode</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> 
                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempNode</span><span class="o">.</span><span class="na">left</span><span class="o">);</span> 
            <span class="o">}</span> 
  
            <span class="cm">/*Enqueue right child */</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">tempNode</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> 
                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tempNode</span><span class="o">.</span><span class="na">right</span><span class="o">);</span> 
            <span class="o">}</span> 
        <span class="o">}</span> 
</code></pre></div></div>

<hr />
<p><br /><br /></p>

<h2 id="problems">Problems</h2>

<h3 id="haspathwithgivensum">hasPathWithGivenSum</h3>

<blockquote>
  <p>Given a binary tree t and an integer s, determine whether there is a root to leaf path in t such that the sum of vertex values equals s.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">// Binary trees are already defined with this interface:</span>
<span class="c1">// class Tree&lt;T&gt; {</span>
<span class="c1">//   Tree(T x) {</span>
<span class="c1">//     value = x;</span>
<span class="c1">//   }</span>
<span class="c1">//   T value;</span>
<span class="c1">//   Tree&lt;T&gt; left;</span>
<span class="c1">//   Tree&lt;T&gt; right;</span>
<span class="c1">// }</span>
<span class="kt">boolean</span> <span class="nf">hasPathWithGivenSum</span><span class="o">(</span><span class="nc">Tree</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">t</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>




    <span class="c1">//If just one of left or right was null, then it was not a child node and false can be returned safely</span>
    <span class="k">if</span><span class="o">(</span><span class="n">t</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    
    <span class="c1">//If this is a child AND sum is input, then we have a path</span>
    <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">t</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="k">return</span> <span class="nf">hasPathWithGivenSum</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">s</span><span class="o">-</span><span class="n">t</span><span class="o">.</span><span class="na">value</span><span class="o">)</span> <span class="o">||</span> <span class="n">hasPathWithGivenSum</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">s</span><span class="o">-</span><span class="n">t</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />
<p><br /><br /></p>

<h3 id="istreesymmetric">isTreeSymmetric</h3>

<blockquote>
  <p>Given a binary tree t, determine whether it is symmetric around its center, i.e. each side mirrors the other.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">// Binary trees are already defined with this interface:</span>
<span class="c1">// class Tree&lt;T&gt; {</span>
<span class="c1">//   Tree(T x) {</span>
<span class="c1">//     value = x;</span>
<span class="c1">//   }</span>
<span class="c1">//   T value;</span>
<span class="c1">//   Tree&lt;T&gt; left;</span>
<span class="c1">//   Tree&lt;T&gt; right;</span>
<span class="c1">// }</span>
<span class="kt">boolean</span> <span class="nf">isTreeSymmetric</span><span class="o">(</span><span class="nc">Tree</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">isMirror</span><span class="o">(</span><span class="n">t</span><span class="o">,</span><span class="n">t</span><span class="o">);</span>
<span class="o">}</span>

<span class="kt">boolean</span> <span class="nf">isMirror</span><span class="o">(</span><span class="nc">Tree</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">root1</span><span class="o">,</span> <span class="nc">Tree</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">root2</span><span class="o">)</span>
<span class="o">{</span>
    <span class="c1">//If both trees are empty, then they are mirror images </span>
    <span class="k">if</span> <span class="o">(</span><span class="n">root1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// For two trees to be mirror images, the following three </span>
    <span class="c1">//     conditions must be true </span>
    <span class="c1">//     1 - Their root node's key must be same </span>
    <span class="c1">//     2 - left subtree of left tree and right subtree </span>
    <span class="c1">//       of the right tree have to be mirror images </span>
    <span class="c1">//     3 - right subtree of left tree and left subtree </span>
    <span class="c1">//        of right tree have to be mirror images </span>

    <span class="k">if</span> <span class="o">(</span><span class="n">root1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">if</span>  <span class="o">(</span><span class="n">root1</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">root2</span><span class="o">.</span><span class="na">value</span><span class="o">))</span>
        <span class="c1">// Java比较能用equals都用equals, 之前跑不过就是因为没用equals. </span>
        <span class="o">{</span>
            <span class="k">return</span> <span class="nf">isMirror</span><span class="o">(</span><span class="n">root1</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">root2</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isMirror</span><span class="o">(</span><span class="n">root1</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">root2</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="o">}</span>   
    <span class="o">}</span>
 

    <span class="c1">//If none of these requirement were met, return false. </span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />
<p><br /><br /></p>

<h3 id="kthsmallestinbst">kthSmallestInBST</h3>

<ul>
  <li>
    <p>A tree is considered a binary search tree (BST) if for each of its nodes the following is true:</p>

    <ul>
      <li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
      <li>The right subtree of a node contains only nodes with keys greater than the node’s key.</li>
      <li>Both the left and the right subtrees must also be binary search trees.</li>
    </ul>
  </li>
  <li>
    <p>Given a binary search tree t, find the kth smallest element in it.</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">// Binary trees are already defined with this interface:</span>
<span class="c1">// class Tree&lt;T&gt; {</span>
<span class="c1">//   Tree(T x) {</span>
<span class="c1">//     value = x;</span>
<span class="c1">//   }</span>
<span class="c1">//   T value;</span>
<span class="c1">//   Tree&lt;T&gt; left;</span>
<span class="c1">//   Tree&lt;T&gt; right;</span>
<span class="c1">// }</span>

<span class="kt">int</span> <span class="n">answer</span><span class="o">,</span> <span class="n">k</span><span class="o">;</span>
<span class="c1">// Recursion 之中, 重要的参数尽量放在 recursion之外, 不然recursion之间的参数极易发生混乱. </span>
<span class="kt">int</span> <span class="nf">kthSmallestInBST</span><span class="o">(</span><span class="nc">Tree</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">t</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>

    <span class="k">this</span><span class="o">.</span><span class="na">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span>
    <span class="n">inorderTraverse</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
<span class="o">}</span>

<span class="kt">void</span> <span class="nf">inorderTraverse</span><span class="o">(</span><span class="nc">Tree</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">t</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">t</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="n">inorderTraverse</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>

    <span class="n">k</span><span class="o">--;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="n">inorderTraverse</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<hr />
<p><br /><br /></p>

<h3 id="issubtree">isSubTree</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">// Binary trees are already defined with this interface:</span>
<span class="c1">// class Tree&lt;T&gt; {</span>
<span class="c1">//   Tree(T x) {</span>
<span class="c1">//     value = x;</span>
<span class="c1">//   }</span>
<span class="c1">//   T value;</span>
<span class="c1">//   Tree&lt;T&gt; left;</span>
<span class="c1">//   Tree&lt;T&gt; right;</span>
<span class="c1">// }</span>

<span class="c1">//没有简单办法, Traverse 整个 Tree, 然后在check每个Node是否相同. </span>
<span class="kt">boolean</span> <span class="nf">isSubtree</span><span class="o">(</span><span class="nc">Tree</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="no">T</span><span class="o">,</span> <span class="nc">Tree</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="no">S</span><span class="o">)</span> <span class="o">{</span>

    <span class="cm">/* base cases */</span>
    <span class="k">if</span> <span class="o">(</span><span class="no">S</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>  
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> 
   
    <span class="k">if</span> <span class="o">(</span><span class="no">T</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> 
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> 
   
    <span class="cm">/* Check the tree with root as current node */</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">areIdentical</span><span class="o">(</span><span class="no">T</span><span class="o">,</span> <span class="no">S</span><span class="o">))</span>  
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> 
   
    <span class="cm">/* If the tree with root as current node doesn't match then 
       try left and right subtrees one by one */</span>
    <span class="k">return</span> <span class="nf">isSubtree</span><span class="o">(</span><span class="no">T</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="no">S</span><span class="o">)</span> <span class="o">||</span> <span class="n">isSubtree</span><span class="o">(</span><span class="no">T</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="no">S</span><span class="o">);</span> 
<span class="o">}</span>


<span class="kt">boolean</span> <span class="nf">areIdentical</span><span class="o">(</span><span class="nc">Tree</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">root1</span><span class="o">,</span> <span class="nc">Tree</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">root2</span><span class="o">)</span>  
<span class="o">{</span> 

    <span class="cm">/* base cases */</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">root1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> 
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> 

    <span class="k">if</span> <span class="o">(</span><span class="n">root1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">root2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> 
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> 

    <span class="cm">/* Check if the data of both roots is same and data of left and right 
        subtrees are also same */</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">root1</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">root2</span><span class="o">.</span><span class="na">value</span><span class="o">)</span>
            <span class="o">&amp;&amp;</span> <span class="n">areIdentical</span><span class="o">(</span><span class="n">root1</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">root2</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> 
            <span class="o">&amp;&amp;</span> <span class="n">areIdentical</span><span class="o">(</span><span class="n">root1</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">root2</span><span class="o">.</span><span class="na">right</span><span class="o">));</span> 

<span class="o">}</span> 
</code></pre></div></div>

:ET